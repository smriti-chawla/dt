/*********************
MIXINS
*********************/

@mixin transition($timing, $effect) {
  transition: all $timing $effect;
  -webkit-transition: all $timing $effect;
  -moz-transition: all $timing $effect;
  -o-transition: all $timing $effect;
}

// generic transform
@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

@mixin box-shadow($top, $left, $blur, $size, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow:inset $top $left $blur $size $color;
    -moz-box-shadow:inset $top $left $blur $size $color;
    box-shadow:inset $top $left $blur $size $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $size $color;
    -moz-box-shadow: $top $left $blur $size $color;
    box-shadow: $top $left $blur $size $color;
  }
}

@mixin clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin breakpoint($point, $value: 0) {
  @if $point == mobileportrait {
    @media (min-width: 320px) and (max-width: 767px) and (orientation : portrait) {
      @content;
    }
  }
  @else if $point == mobilelandscape {
    @media (min-width: 320px) and (max-width: 767px) and (orientation : landscape) {
      @content;
    }
  }
  @else if $point == mobile {
    @media (min-width: 320px) and (max-width: 767px) {
      @content;
    }
  }

  @else if $point == iPadportrait {
    @media (min-width:768px) and (max-width:1024px) and (orientation : portrait) {
      @content;
    }
  }
  @else if $point == iPadlandscape {
    @media (min-width:768px) and (max-width:1024px) and (orientation : landscape){
      @content;
    }
  }
  @else if $point == touchDevice {
    @media (min-width:320px) and (max-width:1024px) {
      @content;
    }
  }
  @else if $point == iPad {
    @media (min-width:768px) and (max-width:1024px){
      @content;
    }
  }
  @else if $point == mobilefirst {
    @media (min-width: 768px){
      @content;
    }
  }
  @else if $point == iPhone {
    @media (min-width:320px) and (max-width:568px) and (orientation : portrait) {
      @content;
    }
  }

  @else {
    @media ($point: $value) {
      @content;
    }
  }
}


@mixin bg-gradient-t2b($start-colour, $end-colour) {
  background-color: $start-colour;
  background-image: -webkit-gradient(linear, left top, left bottom, from($start-colour), to($end-colour));
  background-image: -webkit-linear-gradient(top, $start-colour, $end-colour);
  background-image: -moz-linear-gradient(top, $start-colour, $end-colour);
  background-image: -ms-linear-gradient(top, $start-colour, $end-colour);
  background-image: -o-linear-gradient(top, $start-colour, $end-colour);
  background-image:  linear-gradient(top, $start-colour, $end-colour);
  filter:            progid:DXImageTransform.Microsoft.gradient(start-colourStr='#{$start-colour}', end-colourStr='#{$end-colour}');
}

@mixin gradient($from, $to) {
  background: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
  background: -webkit-linear-gradient(top,  $from, $to);
  background: -moz-linear-gradient(top,  $from, $to);
  background: -ms-linear-gradient(top,  $from, $to);
  background: -o-linear-gradient(top,  $from, $to);
  filter:  progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$from}', endColorstr='#{$to}');
}

//flex
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}


@mixin float-element($width,$height, $float) {
  width: $width;
  height: $height;
  float: $float;
}

@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}
@mixin translate ($x, $y) {
  -webkit-transform: translate($x, $y);
  -moz-transform: translate($x, $y);
  -ms-transform: translate($x, $y);
  -o-transform: translate($x, $y);
}


// Requires inline-block or block for proper styling
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

$cubic-bezier: cubic-bezier(0.7,0,0.3,1);